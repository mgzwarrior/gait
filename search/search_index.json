{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A git AI productivity tool. Installation Production (Beta) pip install --index-url https://test.pypi.org/simple/ src --user Development pyenv install pip3 install -r requirements.txt -r test-requirements.txt Setup Before using gait, you must create an OpenAI secret API key. To do this, login to your OpenAI account (or create one if you don't already have one, they are free!), click \"Personal\" in the top right, then click \"View API keys\" in the dropdown that appears. On the next page, click \"Create new secret key\" and give it a name. Copy the key that is created. You will need to add this key to an environment variable called OPENAI_API_KEY . zsh Open your .zshrc and add the following line: export OPENAI_API_KEY=\"<insert-api-key-here>\" Run source ~/.zshrc in an open terminal window or open a new one and verify by running echo $OPENAI_API_KEY . Usage Usage: gait.py [OPTIONS] COMMAND [ARGS]... Gait is a CLI tool that uses OpenAI's ChatGPT to generate commit messages. It is designed to be used with Git. Options: --help Show this message and exit. Commands: commit This command is ued to generate a commit message using ChatGPT. configure This command is used to configure Gait. push This command is ued to push changes to the remote repository... Configure Usage: gait.py configure [OPTIONS] This command is used to configure Gait. If required, it will prompt the user for their OpenAI API key and test the connection. Options: -v, --verbose Verbose mode. --config FILE Read configuration from FILE. --help Show this message and exit. Commit Usage: gait.py commit [OPTIONS] This command is ued to generate a commit message using ChatGPT. The message is generated based on the diff of the current branch and the master branch. There are two modes for this command: interactive mode (default) and automatic mode. Options: -a, --auto Automatic commit mode. -m, --message TEXT Commit message. -s, --skip Skip OpenAI message generation. -t, --track Track commit flow to train the OpenAI model -v, --verbose Verbose mode. --config FILE Read configuration from FILE. --help Show this message and exit. Examples Use gait in interactive mode: $ python3 gait.py commit ChatGPT gene rated the following commit message: '\"\\n\\nAdd commit command help and example usage to README.md\"' Would you like to commit this message? [y/n/edit] n Aborting... Use gait in interactive mode, but skip OpenAI message generation: $ python3 gait.py commit -s Beginning gait commit... Please enter your commit message below: Use gait in interactive mode, but provide a commit message manually: $ python3 gait.py commit -m 'My commit message' # Note that this will automatically skip OpenAI message generation Beginning gait commit... Please enter your commit message below: Use gait in automatic mode: $ python3 gait.py commit -a Committing... Use gait in verbose mode: $ python3 gait.py commit -a -v ---full-git-diff--- ChatGPT full response: { \"id\": \"cmpl-7Yek3DUb2PgIqQpN7C2BWKPSF0KJn\", \"object\": \"text_completion\", \"created\": 1688494119, \"model\": \"text-davinci-003\", \"choices\": [ { \"text\": \" Commit: Add commit command help and example usage to README.md\", \"index\": 0, \"logprobs\": null, \"finish_reason\": \"stop\" } ], \"usage\": { \"prompt_tokens\": 437, \"completion_tokens\": 14, \"total_tokens\": 451 } } Committing... Push $ python3 gait.py push --help Usage: gait.py push [OPTIONS] This command is ued to push changes to the remote repository and create a pull request with a title and description generated using ChatGPT. The title and description are generated based on the commits being pushed to the remote. There are two modes for this command: interactive mode (default) and automatic mode. Options: -a, --auto Automatic commit mode. -v, --verbose Verbose mode. --config FILE Read configuration from FILE. --help Show this message and exit. Examples Use gait in interactive mode: $ python3 gait.py push Beginning gait push... You have the following commits ready to push. Continue? [y/n] y Pushing... ChatGPT generated the following pull request title: 'Temp Title' and description: 'This is a temporary description' Would you like to create pull request using this title and description? [y/n/edit] n Aborting... Use gait in automatic mode: $ python3 gait.py push -a Beginning gait push... Pushing... Creating pull request using GitHub CLI... Pull request created! Gait push complete! Use gait in verbose mode: $ python3 gait.py push -a -v Beginning gait push... Pushing... Creating pull request using GitHub CLI... Pull request created! Gait push complete! Development To lint the code using Qodana , run: qodana scan --show-report Updating Requirements When new libraries are added using pip, be sure to update the requirements.txt file by running: pip3 freeze > requirements.txt Packaging for Distribution When you are ready to distribute a new version of gait, run the following command: python -m build This will generate a dist folder containing a .tar.gz file and a .whl file. These can be uploaded to PyPI using twine . To install twine , run: pip3 install twine Then upload the files to PyPI Test using the following command: twine upload --repository-url https://test.pypi.org/legacy/ dist/* Before uploading to PyPI for production, consider signing the distribution using GPG. To do this, run the following command: gpg --detach-sign -a dist/src-0.0.1.tar.gz This will generate a .asc file in the dist folder. Upload this file to PyPI using the following command: twine upload dist/* Linting Lint the entire project by running pylint using the following command: pylint $(git ls-files '*.py') This is also run automatically as a GitHub Workflow for all pushes to the main branch. Documentation Use the /docs folder for documentation. Docs can be served locally using mkdocs with the following command: mkdocs serve Training Data When developing in the gait project, we sometimes want to generate training data from using the gait CLI. To do this, we can use the --track flag when running the commit command like so: python3 gait.py commit -t Resources OpenAI Cookbook - a GitHub repo containing a number of userful tips for using the OpenAI API. OpenAI Tokenizer - a utility from OpenAI to tokenize a given text prompt. :construction: click-man - a library to create man pages for click applications.","title":"README"},{"location":"#installation","text":"","title":"Installation"},{"location":"#production-beta","text":"pip install --index-url https://test.pypi.org/simple/ src --user","title":"Production (Beta)"},{"location":"#development","text":"pyenv install pip3 install -r requirements.txt -r test-requirements.txt","title":"Development"},{"location":"#setup","text":"Before using gait, you must create an OpenAI secret API key. To do this, login to your OpenAI account (or create one if you don't already have one, they are free!), click \"Personal\" in the top right, then click \"View API keys\" in the dropdown that appears. On the next page, click \"Create new secret key\" and give it a name. Copy the key that is created. You will need to add this key to an environment variable called OPENAI_API_KEY .","title":"Setup"},{"location":"#zsh","text":"Open your .zshrc and add the following line: export OPENAI_API_KEY=\"<insert-api-key-here>\" Run source ~/.zshrc in an open terminal window or open a new one and verify by running echo $OPENAI_API_KEY .","title":"zsh"},{"location":"#usage","text":"Usage: gait.py [OPTIONS] COMMAND [ARGS]... Gait is a CLI tool that uses OpenAI's ChatGPT to generate commit messages. It is designed to be used with Git. Options: --help Show this message and exit. Commands: commit This command is ued to generate a commit message using ChatGPT. configure This command is used to configure Gait. push This command is ued to push changes to the remote repository...","title":"Usage"},{"location":"#configure","text":"Usage: gait.py configure [OPTIONS] This command is used to configure Gait. If required, it will prompt the user for their OpenAI API key and test the connection. Options: -v, --verbose Verbose mode. --config FILE Read configuration from FILE. --help Show this message and exit.","title":"Configure"},{"location":"#commit","text":"Usage: gait.py commit [OPTIONS] This command is ued to generate a commit message using ChatGPT. The message is generated based on the diff of the current branch and the master branch. There are two modes for this command: interactive mode (default) and automatic mode. Options: -a, --auto Automatic commit mode. -m, --message TEXT Commit message. -s, --skip Skip OpenAI message generation. -t, --track Track commit flow to train the OpenAI model -v, --verbose Verbose mode. --config FILE Read configuration from FILE. --help Show this message and exit.","title":"Commit"},{"location":"#examples","text":"Use gait in interactive mode: $ python3 gait.py commit ChatGPT gene rated the following commit message: '\"\\n\\nAdd commit command help and example usage to README.md\"' Would you like to commit this message? [y/n/edit] n Aborting... Use gait in interactive mode, but skip OpenAI message generation: $ python3 gait.py commit -s Beginning gait commit... Please enter your commit message below: Use gait in interactive mode, but provide a commit message manually: $ python3 gait.py commit -m 'My commit message' # Note that this will automatically skip OpenAI message generation Beginning gait commit... Please enter your commit message below: Use gait in automatic mode: $ python3 gait.py commit -a Committing... Use gait in verbose mode: $ python3 gait.py commit -a -v ---full-git-diff--- ChatGPT full response: { \"id\": \"cmpl-7Yek3DUb2PgIqQpN7C2BWKPSF0KJn\", \"object\": \"text_completion\", \"created\": 1688494119, \"model\": \"text-davinci-003\", \"choices\": [ { \"text\": \" Commit: Add commit command help and example usage to README.md\", \"index\": 0, \"logprobs\": null, \"finish_reason\": \"stop\" } ], \"usage\": { \"prompt_tokens\": 437, \"completion_tokens\": 14, \"total_tokens\": 451 } } Committing...","title":"Examples"},{"location":"#push","text":"$ python3 gait.py push --help Usage: gait.py push [OPTIONS] This command is ued to push changes to the remote repository and create a pull request with a title and description generated using ChatGPT. The title and description are generated based on the commits being pushed to the remote. There are two modes for this command: interactive mode (default) and automatic mode. Options: -a, --auto Automatic commit mode. -v, --verbose Verbose mode. --config FILE Read configuration from FILE. --help Show this message and exit.","title":"Push"},{"location":"#examples_1","text":"Use gait in interactive mode: $ python3 gait.py push Beginning gait push... You have the following commits ready to push. Continue? [y/n] y Pushing... ChatGPT generated the following pull request title: 'Temp Title' and description: 'This is a temporary description' Would you like to create pull request using this title and description? [y/n/edit] n Aborting... Use gait in automatic mode: $ python3 gait.py push -a Beginning gait push... Pushing... Creating pull request using GitHub CLI... Pull request created! Gait push complete! Use gait in verbose mode: $ python3 gait.py push -a -v Beginning gait push... Pushing... Creating pull request using GitHub CLI... Pull request created! Gait push complete!","title":"Examples"},{"location":"#development_1","text":"To lint the code using Qodana , run: qodana scan --show-report","title":"Development"},{"location":"#updating-requirements","text":"When new libraries are added using pip, be sure to update the requirements.txt file by running: pip3 freeze > requirements.txt","title":"Updating Requirements"},{"location":"#packaging-for-distribution","text":"When you are ready to distribute a new version of gait, run the following command: python -m build This will generate a dist folder containing a .tar.gz file and a .whl file. These can be uploaded to PyPI using twine . To install twine , run: pip3 install twine Then upload the files to PyPI Test using the following command: twine upload --repository-url https://test.pypi.org/legacy/ dist/* Before uploading to PyPI for production, consider signing the distribution using GPG. To do this, run the following command: gpg --detach-sign -a dist/src-0.0.1.tar.gz This will generate a .asc file in the dist folder. Upload this file to PyPI using the following command: twine upload dist/*","title":"Packaging for Distribution"},{"location":"#linting","text":"Lint the entire project by running pylint using the following command: pylint $(git ls-files '*.py') This is also run automatically as a GitHub Workflow for all pushes to the main branch.","title":"Linting"},{"location":"#documentation","text":"Use the /docs folder for documentation. Docs can be served locally using mkdocs with the following command: mkdocs serve","title":"Documentation"},{"location":"#training-data","text":"When developing in the gait project, we sometimes want to generate training data from using the gait CLI. To do this, we can use the --track flag when running the commit command like so: python3 gait.py commit -t","title":"Training Data"},{"location":"#resources","text":"OpenAI Cookbook - a GitHub repo containing a number of userful tips for using the OpenAI API. OpenAI Tokenizer - a utility from OpenAI to tokenize a given text prompt. :construction: click-man - a library to create man pages for click applications.","title":"Resources"},{"location":"contributing/","text":"Contribution Guidelines Design Principles Simplicity - The code should be simple and easy to understand. This is the most important principle. If you are not sure if your code is simple enough, ask for a review. KISS - Keep It Simple, Stupid Consistency - The code should be consistent with the rest of the codebase. This means that it should follow the same coding style, use the same terminology, and use the same patterns as the rest of the codebase. Completeness - The code should be complete. This means that it should handle all possible cases, and should not leave any edge cases unhandled. Correctness - The code should be correct. This means that it should produce the correct output for all possible inputs. Efficiency - The code should be efficient. This means that it should produce the correct output in the least amount of time and space possible. Robustness - The code should be robust. This means that it should handle all possible errors and exceptions gracefully. Testability - The code should be testable. This means that it should be easy to write tests for the code. Extensibility - The code should be extensible. This means that it should be easy to add new features to the code. Modularity - The code should be modular. This means that it should be easy to reuse the code in other projects. Maintainability - The code should be maintainable. This means that it should be easy to maintain the code in the long run. Portability - The code should be portable. This means that it should work on all platforms and environments. Security - The code should be secure. This means that it should not contain any security vulnerabilities. Documentation - The code should be documented. This means that it should be easy to understand the code without reading the code itself. Readability - The code should be readable. This means that it should be easy to read and understand the code. Scalability - The code should be scalable. This means that it should be easy to scale the code to handle large amounts of data.","title":"Contributing"},{"location":"contributing/#contribution-guidelines","text":"","title":"Contribution Guidelines"},{"location":"contributing/#design-principles","text":"Simplicity - The code should be simple and easy to understand. This is the most important principle. If you are not sure if your code is simple enough, ask for a review. KISS - Keep It Simple, Stupid Consistency - The code should be consistent with the rest of the codebase. This means that it should follow the same coding style, use the same terminology, and use the same patterns as the rest of the codebase. Completeness - The code should be complete. This means that it should handle all possible cases, and should not leave any edge cases unhandled. Correctness - The code should be correct. This means that it should produce the correct output for all possible inputs. Efficiency - The code should be efficient. This means that it should produce the correct output in the least amount of time and space possible. Robustness - The code should be robust. This means that it should handle all possible errors and exceptions gracefully. Testability - The code should be testable. This means that it should be easy to write tests for the code. Extensibility - The code should be extensible. This means that it should be easy to add new features to the code. Modularity - The code should be modular. This means that it should be easy to reuse the code in other projects. Maintainability - The code should be maintainable. This means that it should be easy to maintain the code in the long run. Portability - The code should be portable. This means that it should work on all platforms and environments. Security - The code should be secure. This means that it should not contain any security vulnerabilities. Documentation - The code should be documented. This means that it should be easy to understand the code without reading the code itself. Readability - The code should be readable. This means that it should be easy to read and understand the code. Scalability - The code should be scalable. This means that it should be easy to scale the code to handle large amounts of data.","title":"Design Principles"},{"location":"tests/","text":"Tests This page is a dumping ground for any tests that you run and their results. Please try to include as much configuration context as possible to ensure consistency across test runs. Test Run 1 Comparing sample diff to real git diff in working directory. Test Run 2 Another example of a real git diff and the commit message written by ChatGPT. Test Run 3 Subtle changes are not well-recognized. Need to tweak the propmpt or train the model somehow. Test Run 4 New files and additions to existing files are well handled. Test Run 5 Note that formatting of the diff is correct, but consider adding syntax highlighting for clarity. Note that the commit message is correct, but the finish_reason is length even though we are no where close to the token limit. Need to research this further. Demo run through of the flow for #8 Test Run 6 Demo run through of the flow for #9","title":"Tests"},{"location":"tests/#tests","text":"This page is a dumping ground for any tests that you run and their results. Please try to include as much configuration context as possible to ensure consistency across test runs.","title":"Tests"},{"location":"tests/#test-run-1","text":"Comparing sample diff to real git diff in working directory.","title":"Test Run 1"},{"location":"tests/#test-run-2","text":"Another example of a real git diff and the commit message written by ChatGPT.","title":"Test Run 2"},{"location":"tests/#test-run-3","text":"Subtle changes are not well-recognized. Need to tweak the propmpt or train the model somehow.","title":"Test Run 3"},{"location":"tests/#test-run-4","text":"New files and additions to existing files are well handled.","title":"Test Run 4"},{"location":"tests/#test-run-5","text":"Note that formatting of the diff is correct, but consider adding syntax highlighting for clarity. Note that the commit message is correct, but the finish_reason is length even though we are no where close to the token limit. Need to research this further. Demo run through of the flow for #8","title":"Test Run 5"},{"location":"tests/#test-run-6","text":"Demo run through of the flow for #9","title":"Test Run 6"}]}