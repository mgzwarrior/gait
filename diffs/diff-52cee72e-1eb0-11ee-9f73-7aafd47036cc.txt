diff --git a/gait.py b/gait.py
index d858b6d..0568184 100644
--- a/gait.py
+++ b/gait.py
@@ -29,11 +29,12 @@ def gait() -> None:
 @click.option(
     "--auto", "-a", default=False, help="Automatic commit mode.", is_flag=True
 )
+@click.option("--skip", "-s", default=False, help="Skip OpenAI message generation.", is_flag=True)
 @click.option("--verbose", "-v", default=False, help="Verbose mode.", is_flag=True)
 @click_config_file.configuration_option(
     config_file_name=CONFIG_FILENAME
 )  # Note that this does not work implicitly
-def commit(auto, verbose) -> None:
+def commit(auto, skip, verbose) -> None:
     """This command is ued to generate a commit message using ChatGPT.
     The message is generated based on the diff of the current branch and the master branch.
     There are two modes for this command: interactive mode (default) and automatic mode.
@@ -42,38 +43,43 @@ def commit(auto, verbose) -> None:
 
     git_service = GitService()
     openai_service = OpenAIService()
+    message = ""
 
-    try:
-        diff_fn = git_service.diff()
-    except GitException as exc:
-        logger.error(exc)
-        raise click.ClickException(str(exc))
+    if not skip:
+        try:
+            diff_fn = git_service.diff()
+        except GitException as exc:
+            logger.error(exc)
+            raise click.ClickException(str(exc))
 
-    try:
-        with open(diff_fn, "r", encoding="utf-8") as diff_file:
-            diff = diff_file.read()
-            commit_message = json.loads(openai_service.generate_commit_message(diff))
+        try:
+            with open(diff_fn, "r", encoding="utf-8") as diff_file:
+                diff = diff_file.read()
+                commit_message = json.loads(openai_service.generate_commit_message(diff))
 
-            if verbose:
-                print(f"Diff: {diff}")
-                print(
-                    f"Generated commit message: {json.dumps(commit_message, indent=4)}"
-                )
+                if verbose:
+                    print(f"Diff: {diff}")
+                    print(
+                        f"Generated commit message: {json.dumps(commit_message, indent=4)}"
+                    )
 
-            logger.info(json.dumps(commit_message, indent=4))
-    except OpenAIException as exc:
-        logger.error(exc)
-        raise click.ClickException(str(exc))
+                logger.info(json.dumps(commit_message, indent=4))
+        except OpenAIException as exc:
+            logger.error(exc)
+            raise click.ClickException(str(exc))
 
-    message = json.dumps(commit_message["choices"][0]["text"], indent=4)
+        message = json.dumps(commit_message["choices"][0]["text"], indent=4)
 
     if auto:
         __git_commit(git_service, message)
     else:
-        print(f"ChatGPT generated the following commit message: '{message}'")
-        print("Would you like to commit this message? [y/n/edit]")
+        choice = "edit"
 
-        choice = input()
+        if not skip:
+            print(f"ChatGPT generated the following commit message: '{message}'")
+            print("Would you like to commit this message? [y/n/edit]")
+
+            choice = input()
 
         if choice == "y":
             __git_commit(git_service, message)
diff --git a/services/openai.py b/services/openai.py
index bcf3a05..5043d68 100644
--- a/services/openai.py
+++ b/services/openai.py
@@ -1,4 +1,5 @@
 import os
+import subprocess
 import textwrap
 from typing import Optional, Type
 
@@ -45,6 +46,8 @@ class OpenAIService:
         self.__set_openai_completion_engine()
         self.__set_openai_api_key()
 
+        if not os.path.exists(ENV_FILENAME):
+            subprocess.run(f"touch {ENV_FILENAME}", shell=True, check=True)
         openai.api_key_path = ENV_FILENAME
 
     def generate_pull_request_description(self) -> str:
